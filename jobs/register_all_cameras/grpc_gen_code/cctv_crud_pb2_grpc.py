# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_gen_code.cctv_crud_pb2 as cctv__crud__pb2


class CctvCrudStub(object):
    """The CctvCrud service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateCameraByUid = channel.unary_unary(
                '/cctvCrud.CctvCrud/UpdateCameraByUid',
                request_serializer=cctv__crud__pb2.CreateCameraRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.CameraResponse.FromString,
                )
        self.GetCameraByUid = channel.unary_unary(
                '/cctvCrud.CctvCrud/GetCameraByUid',
                request_serializer=cctv__crud__pb2.GetCameraByUidRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.CameraFullData.FromString,
                )
        self.CreateCamera = channel.unary_unary(
                '/cctvCrud.CctvCrud/CreateCamera',
                request_serializer=cctv__crud__pb2.CreateCameraRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.CameraResponse.FromString,
                )
        self.DeleteCameraByUid = channel.unary_unary(
                '/cctvCrud.CctvCrud/DeleteCameraByUid',
                request_serializer=cctv__crud__pb2.CameraRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.CameraResponse.FromString,
                )
        self.UpdateApplicationHostByUid = channel.unary_unary(
                '/cctvCrud.CctvCrud/UpdateApplicationHostByUid',
                request_serializer=cctv__crud__pb2.ApplicationRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.ApplicationResponse.FromString,
                )
        self.GetApplicationByUid = channel.unary_unary(
                '/cctvCrud.CctvCrud/GetApplicationByUid',
                request_serializer=cctv__crud__pb2.GetApplicationByUidRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.ApplicationFullData.FromString,
                )
        self.ListApplicationByHost = channel.unary_unary(
                '/cctvCrud.CctvCrud/ListApplicationByHost',
                request_serializer=cctv__crud__pb2.ListApplicationByHostRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.ListApplicationResponse.FromString,
                )
        self.CreateApplication = channel.unary_unary(
                '/cctvCrud.CctvCrud/CreateApplication',
                request_serializer=cctv__crud__pb2.CreateApplicationRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.ApplicationResponse.FromString,
                )
        self.DeleteApplicationByUid = channel.unary_unary(
                '/cctvCrud.CctvCrud/DeleteApplicationByUid',
                request_serializer=cctv__crud__pb2.ApplicationRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.ApplicationResponse.FromString,
                )
        self.UpdateAppTypeById = channel.unary_unary(
                '/cctvCrud.CctvCrud/UpdateAppTypeById',
                request_serializer=cctv__crud__pb2.AppTypeRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.AppTypeResponse.FromString,
                )
        self.GetAppTypeByName = channel.unary_unary(
                '/cctvCrud.CctvCrud/GetAppTypeByName',
                request_serializer=cctv__crud__pb2.GetAppTypeByNameRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.AppTypeFullData.FromString,
                )
        self.GetAppTypeById = channel.unary_unary(
                '/cctvCrud.CctvCrud/GetAppTypeById',
                request_serializer=cctv__crud__pb2.GetAppTypeByIdRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.AppTypeFullData.FromString,
                )
        self.CreateAppType = channel.unary_unary(
                '/cctvCrud.CctvCrud/CreateAppType',
                request_serializer=cctv__crud__pb2.CreateAppTypeRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.AppTypeResponse.FromString,
                )
        self.DeleteAppTypeById = channel.unary_unary(
                '/cctvCrud.CctvCrud/DeleteAppTypeById',
                request_serializer=cctv__crud__pb2.AppTypeRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.AppTypeResponse.FromString,
                )
        self.UpdateMediaChannelsByMediaChannelId = channel.unary_unary(
                '/cctvCrud.CctvCrud/UpdateMediaChannelsByMediaChannelId',
                request_serializer=cctv__crud__pb2.MediaChannelsRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.MediaChannelsResponse.FromString,
                )
        self.ListMediaChannelsByCameraUid = channel.unary_unary(
                '/cctvCrud.CctvCrud/ListMediaChannelsByCameraUid',
                request_serializer=cctv__crud__pb2.ListMediaChannelsByCameraUidRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.ListMediaChannelsResponse.FromString,
                )
        self.ListMediaChannelsByAppUid = channel.unary_unary(
                '/cctvCrud.CctvCrud/ListMediaChannelsByAppUid',
                request_serializer=cctv__crud__pb2.MediaChannelsRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.ListMediaChannelsResponse.FromString,
                )
        self.CreateMediaChannels = channel.unary_unary(
                '/cctvCrud.CctvCrud/CreateMediaChannels',
                request_serializer=cctv__crud__pb2.MediaChannelsRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.MediaChannelsResponse.FromString,
                )
        self.DeleteMediaChannelsByCameraUid = channel.unary_unary(
                '/cctvCrud.CctvCrud/DeleteMediaChannelsByCameraUid',
                request_serializer=cctv__crud__pb2.MediaChannelsRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.ListMediaChannelsResponse.FromString,
                )
        self.ListLatestMediaChannelHealthLog = channel.unary_unary(
                '/cctvCrud.CctvCrud/ListLatestMediaChannelHealthLog',
                request_serializer=cctv__crud__pb2.ListLatestMediaChannelHealthLogRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.ListLatestMediaChannelHealthLogResponse.FromString,
                )
        self.CreateMediaChannelHealthLog = channel.unary_unary(
                '/cctvCrud.CctvCrud/CreateMediaChannelHealthLog',
                request_serializer=cctv__crud__pb2.CreateMediaChannelHealthLogRequest.SerializeToString,
                response_deserializer=cctv__crud__pb2.CreateMediaChannelHealthLogResponse.FromString,
                )


class CctvCrudServicer(object):
    """The CctvCrud service definition.
    """

    def UpdateCameraByUid(self, request, context):
        """crud for table camera
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCameraByUid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCamera(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCameraByUid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateApplicationHostByUid(self, request, context):
        """crud for table application
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetApplicationByUid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListApplicationByHost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateApplication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteApplicationByUid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAppTypeById(self, request, context):
        """crud for table app_type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAppTypeByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAppTypeById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAppType(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAppTypeById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMediaChannelsByMediaChannelId(self, request, context):
        """crud for table media_channels
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMediaChannelsByCameraUid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMediaChannelsByAppUid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateMediaChannels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMediaChannelsByCameraUid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLatestMediaChannelHealthLog(self, request, context):
        """create and read for table media_channel_health_log
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateMediaChannelHealthLog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CctvCrudServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateCameraByUid': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCameraByUid,
                    request_deserializer=cctv__crud__pb2.CreateCameraRequest.FromString,
                    response_serializer=cctv__crud__pb2.CameraResponse.SerializeToString,
            ),
            'GetCameraByUid': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCameraByUid,
                    request_deserializer=cctv__crud__pb2.GetCameraByUidRequest.FromString,
                    response_serializer=cctv__crud__pb2.CameraFullData.SerializeToString,
            ),
            'CreateCamera': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCamera,
                    request_deserializer=cctv__crud__pb2.CreateCameraRequest.FromString,
                    response_serializer=cctv__crud__pb2.CameraResponse.SerializeToString,
            ),
            'DeleteCameraByUid': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCameraByUid,
                    request_deserializer=cctv__crud__pb2.CameraRequest.FromString,
                    response_serializer=cctv__crud__pb2.CameraResponse.SerializeToString,
            ),
            'UpdateApplicationHostByUid': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateApplicationHostByUid,
                    request_deserializer=cctv__crud__pb2.ApplicationRequest.FromString,
                    response_serializer=cctv__crud__pb2.ApplicationResponse.SerializeToString,
            ),
            'GetApplicationByUid': grpc.unary_unary_rpc_method_handler(
                    servicer.GetApplicationByUid,
                    request_deserializer=cctv__crud__pb2.GetApplicationByUidRequest.FromString,
                    response_serializer=cctv__crud__pb2.ApplicationFullData.SerializeToString,
            ),
            'ListApplicationByHost': grpc.unary_unary_rpc_method_handler(
                    servicer.ListApplicationByHost,
                    request_deserializer=cctv__crud__pb2.ListApplicationByHostRequest.FromString,
                    response_serializer=cctv__crud__pb2.ListApplicationResponse.SerializeToString,
            ),
            'CreateApplication': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateApplication,
                    request_deserializer=cctv__crud__pb2.CreateApplicationRequest.FromString,
                    response_serializer=cctv__crud__pb2.ApplicationResponse.SerializeToString,
            ),
            'DeleteApplicationByUid': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteApplicationByUid,
                    request_deserializer=cctv__crud__pb2.ApplicationRequest.FromString,
                    response_serializer=cctv__crud__pb2.ApplicationResponse.SerializeToString,
            ),
            'UpdateAppTypeById': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAppTypeById,
                    request_deserializer=cctv__crud__pb2.AppTypeRequest.FromString,
                    response_serializer=cctv__crud__pb2.AppTypeResponse.SerializeToString,
            ),
            'GetAppTypeByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAppTypeByName,
                    request_deserializer=cctv__crud__pb2.GetAppTypeByNameRequest.FromString,
                    response_serializer=cctv__crud__pb2.AppTypeFullData.SerializeToString,
            ),
            'GetAppTypeById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAppTypeById,
                    request_deserializer=cctv__crud__pb2.GetAppTypeByIdRequest.FromString,
                    response_serializer=cctv__crud__pb2.AppTypeFullData.SerializeToString,
            ),
            'CreateAppType': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAppType,
                    request_deserializer=cctv__crud__pb2.CreateAppTypeRequest.FromString,
                    response_serializer=cctv__crud__pb2.AppTypeResponse.SerializeToString,
            ),
            'DeleteAppTypeById': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAppTypeById,
                    request_deserializer=cctv__crud__pb2.AppTypeRequest.FromString,
                    response_serializer=cctv__crud__pb2.AppTypeResponse.SerializeToString,
            ),
            'UpdateMediaChannelsByMediaChannelId': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMediaChannelsByMediaChannelId,
                    request_deserializer=cctv__crud__pb2.MediaChannelsRequest.FromString,
                    response_serializer=cctv__crud__pb2.MediaChannelsResponse.SerializeToString,
            ),
            'ListMediaChannelsByCameraUid': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMediaChannelsByCameraUid,
                    request_deserializer=cctv__crud__pb2.ListMediaChannelsByCameraUidRequest.FromString,
                    response_serializer=cctv__crud__pb2.ListMediaChannelsResponse.SerializeToString,
            ),
            'ListMediaChannelsByAppUid': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMediaChannelsByAppUid,
                    request_deserializer=cctv__crud__pb2.MediaChannelsRequest.FromString,
                    response_serializer=cctv__crud__pb2.ListMediaChannelsResponse.SerializeToString,
            ),
            'CreateMediaChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMediaChannels,
                    request_deserializer=cctv__crud__pb2.MediaChannelsRequest.FromString,
                    response_serializer=cctv__crud__pb2.MediaChannelsResponse.SerializeToString,
            ),
            'DeleteMediaChannelsByCameraUid': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMediaChannelsByCameraUid,
                    request_deserializer=cctv__crud__pb2.MediaChannelsRequest.FromString,
                    response_serializer=cctv__crud__pb2.ListMediaChannelsResponse.SerializeToString,
            ),
            'ListLatestMediaChannelHealthLog': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLatestMediaChannelHealthLog,
                    request_deserializer=cctv__crud__pb2.ListLatestMediaChannelHealthLogRequest.FromString,
                    response_serializer=cctv__crud__pb2.ListLatestMediaChannelHealthLogResponse.SerializeToString,
            ),
            'CreateMediaChannelHealthLog': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMediaChannelHealthLog,
                    request_deserializer=cctv__crud__pb2.CreateMediaChannelHealthLogRequest.FromString,
                    response_serializer=cctv__crud__pb2.CreateMediaChannelHealthLogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cctvCrud.CctvCrud', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CctvCrud(object):
    """The CctvCrud service definition.
    """

    @staticmethod
    def UpdateCameraByUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/UpdateCameraByUid',
            cctv__crud__pb2.CreateCameraRequest.SerializeToString,
            cctv__crud__pb2.CameraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCameraByUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/GetCameraByUid',
            cctv__crud__pb2.GetCameraByUidRequest.SerializeToString,
            cctv__crud__pb2.CameraFullData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCamera(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/CreateCamera',
            cctv__crud__pb2.CreateCameraRequest.SerializeToString,
            cctv__crud__pb2.CameraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCameraByUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/DeleteCameraByUid',
            cctv__crud__pb2.CameraRequest.SerializeToString,
            cctv__crud__pb2.CameraResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateApplicationHostByUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/UpdateApplicationHostByUid',
            cctv__crud__pb2.ApplicationRequest.SerializeToString,
            cctv__crud__pb2.ApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetApplicationByUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/GetApplicationByUid',
            cctv__crud__pb2.GetApplicationByUidRequest.SerializeToString,
            cctv__crud__pb2.ApplicationFullData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListApplicationByHost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/ListApplicationByHost',
            cctv__crud__pb2.ListApplicationByHostRequest.SerializeToString,
            cctv__crud__pb2.ListApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateApplication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/CreateApplication',
            cctv__crud__pb2.CreateApplicationRequest.SerializeToString,
            cctv__crud__pb2.ApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteApplicationByUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/DeleteApplicationByUid',
            cctv__crud__pb2.ApplicationRequest.SerializeToString,
            cctv__crud__pb2.ApplicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAppTypeById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/UpdateAppTypeById',
            cctv__crud__pb2.AppTypeRequest.SerializeToString,
            cctv__crud__pb2.AppTypeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAppTypeByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/GetAppTypeByName',
            cctv__crud__pb2.GetAppTypeByNameRequest.SerializeToString,
            cctv__crud__pb2.AppTypeFullData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAppTypeById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/GetAppTypeById',
            cctv__crud__pb2.GetAppTypeByIdRequest.SerializeToString,
            cctv__crud__pb2.AppTypeFullData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAppType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/CreateAppType',
            cctv__crud__pb2.CreateAppTypeRequest.SerializeToString,
            cctv__crud__pb2.AppTypeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAppTypeById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/DeleteAppTypeById',
            cctv__crud__pb2.AppTypeRequest.SerializeToString,
            cctv__crud__pb2.AppTypeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateMediaChannelsByMediaChannelId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/UpdateMediaChannelsByMediaChannelId',
            cctv__crud__pb2.MediaChannelsRequest.SerializeToString,
            cctv__crud__pb2.MediaChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMediaChannelsByCameraUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/ListMediaChannelsByCameraUid',
            cctv__crud__pb2.ListMediaChannelsByCameraUidRequest.SerializeToString,
            cctv__crud__pb2.ListMediaChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMediaChannelsByAppUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/ListMediaChannelsByAppUid',
            cctv__crud__pb2.MediaChannelsRequest.SerializeToString,
            cctv__crud__pb2.ListMediaChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateMediaChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/CreateMediaChannels',
            cctv__crud__pb2.MediaChannelsRequest.SerializeToString,
            cctv__crud__pb2.MediaChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMediaChannelsByCameraUid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/DeleteMediaChannelsByCameraUid',
            cctv__crud__pb2.MediaChannelsRequest.SerializeToString,
            cctv__crud__pb2.ListMediaChannelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLatestMediaChannelHealthLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/ListLatestMediaChannelHealthLog',
            cctv__crud__pb2.ListLatestMediaChannelHealthLogRequest.SerializeToString,
            cctv__crud__pb2.ListLatestMediaChannelHealthLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateMediaChannelHealthLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cctvCrud.CctvCrud/CreateMediaChannelHealthLog',
            cctv__crud__pb2.CreateMediaChannelHealthLogRequest.SerializeToString,
            cctv__crud__pb2.CreateMediaChannelHealthLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
